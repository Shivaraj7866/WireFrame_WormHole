{ 0.3892749933672679, y: 8, z: -10},
{x: 0.7277836397808324, y: 7, z: 0},
 {x: 0.8669356126785273, y: 6.5, z: 0},
 {x: 0.6668338538344569, y: 6, z: 0},
 {x: 0.09987991247067285, y: 5.5, z: 0},
 {x: 0.8624626919302489, y: 5, z: 0},
 {x: -0.5549358480125499, y: 4.5, z: 0},
 {x: 0.3275462384320118, y: 4, z: 0},
 {x: -0.792433608748667, y: 3.5, z: 0},
 {x: 0.772811250381479, y: 3, z: 0},
 {x: -0.5774999126480771, y: 2.5, z: 0},
 {x: -0.7804296529883055, y: 2, z: 0},
 {x: -0.18915002254877944, y: 1.5, z: 0},
  {x: -0.8765074125343508, y: 1, z: 0},
  {x: -0.48583908952687516, y: 0.5, z: 0},
  {x: -0.06380504947617549, y: 0, z: 0},
  {x: -0.010443619754686662, y: -0.5, z: 0},
   {x: 0.9912633817776801, y: -1.5, z: 0},
   {x: 0.9206694267350248, y: -2.5, z: 0},
   {x: -0.8171410296413257, y: -4.5, z: 0},
   {x: -0.2922099305751691, y: -5, z: 0},
   {x: -0.4723746641896338, y: -5.5, z: 0},
   {x: -0.07558788428000929, y: -6, z: 0},
   {x: -0.8335401708443948, y: -6.5, z: 0},
   {x: -0.6889328315862486, y: -6.5, z: 0},
   {x: -0.786750277663034, y: -7, z: -10}

   [
      new THREE.Vector3(Math.random() * 2 - 1, 8, -10),
      new THREE.Vector3(Math.random() * 2 - 1, 7, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 6.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 6, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 5.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 4.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 4, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 3.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 3, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 2.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 2, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 1.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 1, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 0.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 0, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -0.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -1.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -2.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -4.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -5.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -6, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -6.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -6.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -7, -10),
    ]



     const curves = [
    [
      new THREE.Vector3(Math.random() * 2 - 1, 6, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 5.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 4.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 4, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 3.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 3, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 2.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 2, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 1.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 1, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 0.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, 0, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -0.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -1.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -2.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -4.5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -5, 0),
      new THREE.Vector3(Math.random() * 2 - 1, -5.5, 0),
    ],
    [
      new THREE.Vector3(Math.random() * 4 + 1, 6, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 5.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 4.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 4, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 3.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 3, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 2.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 2, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 1.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 1, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 0.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, 0, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -0.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -1.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -2.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -4.5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -5, 0),
      new THREE.Vector3(Math.random() * 4 + 1, -5.5, 0),
    ],
    [
      new THREE.Vector3(Math.random() * 2, 6, -4),
      new THREE.Vector3(Math.random() * 2, 5.5, -4),
      new THREE.Vector3(Math.random() * 2, 5, -4),
      new THREE.Vector3(Math.random() * 2, 4.5, -4),
      new THREE.Vector3(Math.random() * 2, 4, -4),
      new THREE.Vector3(Math.random() * 2, 3.5, -4),
      new THREE.Vector3(Math.random() * 2, 3, -4),
      new THREE.Vector3(Math.random() * 2, 2.5, -4),
      new THREE.Vector3(Math.random() * 2, 2, -4),
      new THREE.Vector3(Math.random() * 2, 1.5, -4),
      new THREE.Vector3(Math.random() * 2, 1, -4),
      new THREE.Vector3(Math.random() * 2, 0.5, -4),
      new THREE.Vector3(Math.random() * 2, 0, -4),
      new THREE.Vector3(Math.random() * 2, -0.5, -4),
      new THREE.Vector3(Math.random() * 2, -1.5, -4),
      new THREE.Vector3(Math.random() * 2, -2.5, -4),
      new THREE.Vector3(Math.random() * 2, -4.5, -4),
      new THREE.Vector3(Math.random() * 2, -5, -4),
      new THREE.Vector3(Math.random() * 2, -5.5, -4),
    ]
  ].map(function (curvePoints) {

    const curveVertices = curvePoints.map(function (handlePos) {

      const handle = new THREE.Mesh(boxGeometry, boxMaterial);
      handle.position.copy(handlePos);
      curveHandles.push(handle);
      scene.add(handle);
      return handle.position;

    });

    console.log(curveVertices)

    const curve = new THREE.CatmullRomCurve3(curveVertices);
    curve.curveType = 'centripetal';
    curve.closed = true;
    curve.tension = 0.7

    const points = curve.getPoints(50);
    const line = new THREE.LineLoop(
      new THREE.BufferGeometry().setFromPoints(points),
      new THREE.LineBasicMaterial({ color: 0xff00ff })
    );

    scene.add(line);

    return { curve, line };

  });